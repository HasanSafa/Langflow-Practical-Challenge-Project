{
  "data": {
    "edges": [
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "SentimentAnalysisVADER",
            "id": "CustomComponent-Ohzjn",
            "name": "classified_tickets",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "tickets",
            "id": "CustomComponent-D8N3i",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__CustomComponent-Ohzjn{œdataTypeœ:œSentimentAnalysisVADERœ,œidœ:œCustomComponent-Ohzjnœ,œnameœ:œclassified_ticketsœ,œoutput_typesœ:[œDataœ]}-CustomComponent-D8N3i{œfieldNameœ:œticketsœ,œidœ:œCustomComponent-D8N3iœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "CustomComponent-Ohzjn",
        "sourceHandle": "{œdataTypeœ:œSentimentAnalysisVADERœ,œidœ:œCustomComponent-Ohzjnœ,œnameœ:œclassified_ticketsœ,œoutput_typesœ:[œDataœ]}",
        "target": "CustomComponent-D8N3i",
        "targetHandle": "{œfieldNameœ:œticketsœ,œidœ:œCustomComponent-D8N3iœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "AggregateStats",
            "id": "CustomComponent-D8N3i",
            "name": "stats",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "stats",
            "id": "CustomComponent-URrC1",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__CustomComponent-D8N3i{œdataTypeœ:œAggregateStatsœ,œidœ:œCustomComponent-D8N3iœ,œnameœ:œstatsœ,œoutput_typesœ:[œDataœ]}-CustomComponent-URrC1{œfieldNameœ:œstatsœ,œidœ:œCustomComponent-URrC1œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "CustomComponent-D8N3i",
        "sourceHandle": "{œdataTypeœ:œAggregateStatsœ,œidœ:œCustomComponent-D8N3iœ,œnameœ:œstatsœ,œoutput_typesœ:[œDataœ]}",
        "target": "CustomComponent-URrC1",
        "targetHandle": "{œfieldNameœ:œstatsœ,œidœ:œCustomComponent-URrC1œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "LoadTicketsCSV",
            "id": "CustomComponent-X75x4",
            "name": "tickets_data",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "tickets",
            "id": "CustomComponent-Ohzjn",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__CustomComponent-X75x4{œdataTypeœ:œLoadTicketsCSVœ,œidœ:œCustomComponent-X75x4œ,œnameœ:œtickets_dataœ,œoutput_typesœ:[œDataœ]}-CustomComponent-Ohzjn{œfieldNameœ:œticketsœ,œidœ:œCustomComponent-Ohzjnœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "CustomComponent-X75x4",
        "sourceHandle": "{œdataTypeœ:œLoadTicketsCSVœ,œidœ:œCustomComponent-X75x4œ,œnameœ:œtickets_dataœ,œoutput_typesœ:[œDataœ]}",
        "target": "CustomComponent-Ohzjn",
        "targetHandle": "{œfieldNameœ:œticketsœ,œidœ:œCustomComponent-Ohzjnœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}"
      }
    ],
    "nodes": [
      {
        "data": {
          "id": "CustomComponent-X75x4",
          "node": {
            "base_classes": [
              "Data"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Reads a CSV file with support tickets, calculates response_time, and outputs the data.",
            "display_name": "Load Tickets CSV",
            "documentation": "https://docs.langflow.org/components-custom-components",
            "edited": true,
            "field_order": [
              "file_path"
            ],
            "frozen": false,
            "icon": "file",
            "legacy": false,
            "lf_version": "1.5.0.post1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Tickets Data",
                "group_outputs": false,
                "hidden": null,
                "method": "build_output",
                "name": "tickets_data",
                "options": null,
                "required_inputs": null,
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import pandas as pd\nfrom datetime import datetime\nfrom langflow.custom.custom_component.component import Component\nfrom langflow.io import StrInput, Output\nfrom langflow.schema.data import Data\nimport os\n\nclass LoadTicketsCSV(Component):\n    display_name = \"Load Tickets CSV\"\n    description = \"Reads a CSV file with support tickets, calculates response_time, and outputs the data.\"\n    documentation: str = \"https://docs.langflow.org/components-custom-components\"\n    icon = \"file\"\n    name = \"LoadTicketsCSV\"\n\n    inputs = [\n        StrInput(name=\"file_path\", display_name=\"CSV File Path\", info=\"Path to the tickets.csv file\", value=\"C:/Users/HP/Downloads/tickets.csv\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Tickets Data\", name=\"tickets_data\", method=\"build_output\"),\n    ]\n\n    def build_output(self) -> Data:\n        file_path = self.file_path\n\n        if not os.path.exists(file_path):\n            raise FileNotFoundError(f\"CSV file not found at {file_path}\")\n\n        df = pd.read_csv(file_path, parse_dates=[\"open_date\", \"close_date\"])\n\n        for col in [\"open_date\", \"close_date\"]:\n            if col not in df.columns:\n                raise ValueError(f\"Missing required column: {col}\")\n\n        df[\"response_time\"] = (df[\"close_date\"] - df[\"open_date\"]).dt.days\n\n        records = df.to_dict(orient=\"records\")\n        self.status = f\"Loaded {len(records)} tickets from {file_path}\"\n        return Data(value=records)\n\n"
              },
              "file_path": {
                "_input_type": "StrInput",
                "advanced": false,
                "display_name": "CSV File Path",
                "dynamic": false,
                "info": "Path to the tickets.csv file",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "file_path",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "C:/Users/HP/Downloads/tickets.csv"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "LoadTicketsCSV"
        },
        "dragging": false,
        "id": "CustomComponent-X75x4",
        "measured": {
          "height": 219,
          "width": 320
        },
        "position": {
          "x": -1282.7705348535615,
          "y": -562.4761280494008
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "CustomComponent-Ohzjn",
          "node": {
            "base_classes": [
              "Data"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Classifies ticket sentiments using NLTK VADER based on the 'ticket_description' field.",
            "display_name": "Sentiment Analysis (VADER)",
            "documentation": "",
            "edited": true,
            "field_order": [
              "tickets"
            ],
            "frozen": false,
            "icon": "face-smile",
            "legacy": false,
            "lf_version": "1.5.0.post1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Classified Tickets",
                "group_outputs": false,
                "hidden": null,
                "method": "analyze_sentiment",
                "name": "classified_tickets",
                "options": null,
                "required_inputs": null,
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom.custom_component.component import Component\r\nfrom langflow.io import DataInput, Output\r\nfrom langflow.schema.data import Data\r\n\r\nclass SentimentAnalysisVADER(Component):\r\n    display_name = \"Sentiment Analysis (VADER)\"\r\n    description = \"Classifies ticket sentiments using NLTK VADER based on the 'ticket_description' field.\"\r\n    icon = \"face-smile\"\r\n    name = \"SentimentAnalysisVADER\"\r\n\r\n    inputs = [\r\n        DataInput(name=\"tickets\", display_name=\"Tickets Data\", info=\"List of ticket dictionaries\", is_list=True),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Classified Tickets\", name=\"classified_tickets\", method=\"analyze_sentiment\"),\r\n    ]\r\n\r\n    def analyze_sentiment(self) -> Data:\r\n        from nltk.sentiment.vader import SentimentIntensityAnalyzer\r\n        sia = SentimentIntensityAnalyzer()\r\n\r\n        raw_input = self.tickets\r\n        tickets_list = raw_input.value if hasattr(raw_input, \"value\") else raw_input\r\n\r\n        if not tickets_list:\r\n            self.status = \"No tickets received for sentiment analysis\"\r\n            return Data(value=[])\r\n\r\n        normalized = []\r\n        for item in tickets_list:\r\n            if hasattr(item, \"value\"):\r\n                item = item.value\r\n            if isinstance(item, list):\r\n                normalized.extend(item)\r\n            elif isinstance(item, dict):\r\n                normalized.append(item)\r\n\r\n        result = []\r\n        for ticket in normalized:\r\n            text = ticket.get(\"ticket_description\", \"\").strip()\r\n            if not text:\r\n                ticket[\"sentiment\"] = \"Unknown\"\r\n            else:\r\n                score = sia.polarity_scores(text)[\"compound\"]\r\n                if score >= 0.05:\r\n                    ticket[\"sentiment\"] = \"Positive\"\r\n                elif score <= -0.05:\r\n                    ticket[\"sentiment\"] = \"Negative\"\r\n                else:\r\n                    ticket[\"sentiment\"] = \"Neutral\"\r\n            result.append(ticket)\r\n\r\n        self.status = f\"Classified {len(result)} tickets\"\r\n        return Data(value=result)"
              },
              "tickets": {
                "_input_type": "DataInput",
                "advanced": false,
                "display_name": "Tickets Data",
                "dynamic": false,
                "info": "List of ticket dictionaries",
                "input_types": [
                  "Data"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "tickets",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "SentimentAnalysisVADER"
        },
        "dragging": false,
        "id": "CustomComponent-Ohzjn",
        "measured": {
          "height": 181,
          "width": 320
        },
        "position": {
          "x": -934.4739460233304,
          "y": -335.29926499581546
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "CustomComponent-D8N3i",
          "node": {
            "base_classes": [
              "Data"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Aggregates sentiment counts, average response time, and sample tickets.",
            "display_name": "Aggregate Ticket Stats",
            "documentation": "",
            "edited": true,
            "field_order": [
              "tickets"
            ],
            "frozen": false,
            "icon": "chart-bar",
            "legacy": false,
            "lf_version": "1.5.0.post1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Stats",
                "group_outputs": false,
                "hidden": null,
                "method": "aggregate",
                "name": "stats",
                "options": null,
                "required_inputs": null,
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom.custom_component.component import Component\r\nfrom langflow.io import DataInput, Output\r\nfrom langflow.schema.data import Data\r\n\r\ndef flatten_to_dicts(data):\r\n    if hasattr(data, \"value\"):\r\n        return flatten_to_dicts(data.value)\r\n    if isinstance(data, dict):\r\n        return [data]\r\n    if isinstance(data, list):\r\n        result = []\r\n        for item in data:\r\n            result.extend(flatten_to_dicts(item))\r\n        return result\r\n    return []\r\n\r\nclass AggregateStats(Component):\r\n    display_name = \"Aggregate Ticket Stats\"\r\n    description = \"Aggregates sentiment counts, average response time, and sample tickets.\"\r\n    icon = \"chart-bar\"\r\n    name = \"AggregateStats\"\r\n\r\n    inputs = [\r\n        DataInput(name=\"tickets\", display_name=\"Classified Tickets\", info=\"List of ticket dicts\", is_list=True),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Stats\", name=\"stats\", method=\"aggregate\"),\r\n    ]\r\n\r\n    def aggregate(self) -> Data:\r\n        tickets_list = flatten_to_dicts(self.tickets)\r\n\r\n        total = len(tickets_list)\r\n        positive = [t for t in tickets_list if t.get(\"sentiment\") == \"Positive\"]\r\n        negative = [t for t in tickets_list if t.get(\"sentiment\") == \"Negative\"]\r\n        neutral = [t for t in tickets_list if t.get(\"sentiment\") == \"Neutral\"]\r\n\r\n        response_times = [t.get(\"response_time\", 0) for t in tickets_list if \"response_time\" in t]\r\n        avg_response = sum(response_times) / len(response_times) if response_times else 0\r\n\r\n        stats = {\r\n            \"total_count\": total,\r\n            \"count_positive\": len(positive),\r\n            \"count_negative\": len(negative),\r\n            \"count_neutral\": len(neutral),\r\n            \"avg_response\": round(avg_response, 2),\r\n            \"sample_positive\": [p.get(\"ticket_description\", \"\")[:60] for p in positive[:3]],\r\n            \"sample_negative\": [n.get(\"ticket_description\", \"\")[:60] for n in negative[:3]],\r\n            \"sample_neutral\": [nu.get(\"ticket_description\", \"\")[:60] for nu in neutral[:3]],\r\n        }\r\n        return Data(value=stats)"
              },
              "tickets": {
                "_input_type": "DataInput",
                "advanced": false,
                "display_name": "Classified Tickets",
                "dynamic": false,
                "info": "List of ticket dicts",
                "input_types": [
                  "Data"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "tickets",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "AggregateStats"
        },
        "dragging": false,
        "id": "CustomComponent-D8N3i",
        "measured": {
          "height": 181,
          "width": 320
        },
        "position": {
          "x": -576.8675957783535,
          "y": -146.70293624808394
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "CustomComponent-URrC1",
          "node": {
            "base_classes": [
              "Data"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Sends the monthly support ticket report with sample tickets.",
            "display_name": "Send Report Email",
            "documentation": "",
            "edited": true,
            "field_order": [
              "stats",
              "month",
              "discord_user",
              "smtp_server",
              "smtp_port",
              "sender_email",
              "sender_password",
              "recipient_email"
            ],
            "frozen": false,
            "icon": "mail",
            "legacy": false,
            "lf_version": "1.5.0.post1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Email Status",
                "group_outputs": false,
                "hidden": null,
                "method": "send_email",
                "name": "status",
                "options": null,
                "required_inputs": null,
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom.custom_component.component import Component\r\nfrom langflow.io import DataInput, Output, StrInput, IntInput\r\nfrom langflow.schema.data import Data\r\nimport smtplib\r\nfrom email.mime.text import MIMEText\r\n\r\nclass SendReportEmail(Component):\r\n    display_name = \"Send Report Email\"\r\n    description = \"Sends the monthly support ticket report with sample tickets.\"\r\n    icon = \"mail\"\r\n    name = \"SendReportEmail\"\r\n\r\n    inputs = [\r\n        DataInput(name=\"stats\", display_name=\"Aggregated Stats\", info=\"Stats dict\", is_list=False),\r\n        StrInput(name=\"month\", display_name=\"Report Month\", value=\"2025-07\"),\r\n        StrInput(name=\"discord_user\", display_name=\"Discord User\", value=\"YourDiscordUsername\"),\r\n        StrInput(name=\"smtp_server\", display_name=\"SMTP Server\", value=\"smtp.gmail.com\"),\r\n        IntInput(name=\"smtp_port\", display_name=\"SMTP Port\", value=587),\r\n        StrInput(name=\"sender_email\", display_name=\"Sender Email\", value=\"youremail@gmail.com\"),\r\n        StrInput(name=\"sender_password\", display_name=\"Sender Password\", value=\"app_password\"),\r\n        StrInput(name=\"recipient_email\", display_name=\"Recipient Email\", value=\"contact@langflow.com\"),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Email Status\", name=\"status\", method=\"send_email\"),\r\n    ]\r\n\r\n    def send_email(self) -> Data:\r\n        stats = self.stats.value if hasattr(self.stats, \"value\") else self.stats\r\n\r\n        def format_samples(label, samples):\r\n            if not samples: \r\n                return f\"- No {label} samples\\n\"\r\n            return f\"- {label} Samples:\\n\" + \"\\n\".join([f\"  • {s}\" for s in samples]) + \"\\n\"\r\n\r\n        body = (\r\n            f\"# Support Ticket Summary for {self.month}\\n\"\r\n            f\"**Total Tickets:** {stats['total_count']}\\n\"\r\n            f\"**Average Response Time:** {stats['avg_response']} days\\n\\n\"\r\n            f\"## Sentiment Breakdown\\n\"\r\n            f\"- Positive: {stats['count_positive']}\\n\"\r\n            f\"- Neutral: {stats['count_neutral']}\\n\"\r\n            f\"- Negative: {stats['count_negative']}\\n\\n\"\r\n            f\"### Examples:\\n\"\r\n            f\"{format_samples('Positive', stats.get('sample_positive', []))}\\n\"\r\n            f\"{format_samples('Neutral', stats.get('sample_neutral', []))}\\n\"\r\n            f\"{format_samples('Negative', stats.get('sample_negative', []))}\"\r\n        )\r\n\r\n        msg = MIMEText(body, \"plain\")\r\n        msg[\"Subject\"] = f\"Monthly Support Ticket Report – {self.month} - {self.discord_user}\"\r\n        msg[\"From\"] = self.sender_email\r\n        msg[\"To\"] = self.recipient_email\r\n\r\n        try:\r\n            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:\r\n                server.starttls()\r\n                server.login(self.sender_email, self.sender_password)\r\n                server.sendmail(self.sender_email, [self.recipient_email], msg.as_string())\r\n            return Data(value=\"✅ Email sent successfully\")\r\n        except Exception as e:\r\n            return Data(value=f\"❌ Failed to send email: {e}\")"
              },
              "discord_user": {
                "_input_type": "StrInput",
                "advanced": false,
                "display_name": "Discord User",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "discord_user",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "hasansafa000"
              },
              "month": {
                "_input_type": "StrInput",
                "advanced": false,
                "display_name": "Report Month",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "month",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "2025-07"
              },
              "recipient_email": {
                "_input_type": "StrInput",
                "advanced": false,
                "display_name": "Recipient Email",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "recipient_email",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "contact@langflow.com"
              },
              "sender_email": {
                "_input_type": "StrInput",
                "advanced": false,
                "display_name": "Sender Email",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_email",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "langflow.challenge@gmail.com"
              },
              "sender_password": {
                "_input_type": "StrInput",
                "advanced": false,
                "display_name": "Sender Password",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_password",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "eimc dcbi eyar eifa"
              },
              "smtp_port": {
                "_input_type": "IntInput",
                "advanced": false,
                "display_name": "SMTP Port",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "smtp_port",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 587
              },
              "smtp_server": {
                "_input_type": "StrInput",
                "advanced": false,
                "display_name": "SMTP Server",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "smtp_server",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "smtp.gmail.com"
              },
              "stats": {
                "_input_type": "DataInput",
                "advanced": false,
                "display_name": "Aggregated Stats",
                "dynamic": false,
                "info": "Stats dict",
                "input_types": [
                  "Data"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "stats",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "SendReportEmail"
        },
        "dragging": false,
        "id": "CustomComponent-URrC1",
        "measured": {
          "height": 755,
          "width": 320
        },
        "position": {
          "x": -232.73998489367395,
          "y": -550.3482931701914
        },
        "selected": true,
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 754.5537240185618,
      "y": 476.67389376197025,
      "zoom": 0.7052279625405391
    }
  },
  "description": "This project implements an **end-to-end automated flow** using **Langflow** to generate a **monthly support ticket report**.  \nThe flow loads ticket data, classifies them by sentiment, aggregates statistics, and sends a formatted email to stakeholder",
  "endpoint_name": null,
  "id": "2e1ca985-b675-4aba-9424-3bf776c93851",
  "is_component": false,
  "last_tested_version": "1.5.0.post1",
  "name": "Langflow Practical Challenge Project",
  "tags": []
}